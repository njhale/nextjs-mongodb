import ReactMarkdown from 'react-markdown'
import matter from 'gray-matter'
import {Todo} from '@prisma/client'
import React, {useState, useRef, useEffect} from 'react'
import styles from './index.module.css';
import { nextTick } from 'process'

const message = 'Next.js Acorn Starter'

type HomeProps = { todos: Array<Todo> }

export default function Home(props: HomeProps) {
  const [welcome, setWelcome] = useState(message)
  const [name, setName] = useState('')
  const [content, setContent] = useState('')
  const [todos, setTodos] = useState(new Array<Todo>)

  const create = async(e: React.SyntheticEvent) => {
    try {
      e.preventDefault()
      await fetch('/api/todos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json'},
        body: JSON.stringify({name, content})
      })

      nextTick(() => {
        setName('')
        setContent('')
      })

      get()
    } catch (error) {
      alert(`Failed to create todo: ${error}`)
    }
  }

  const remove = async(e: React.SyntheticEvent, id: string) => {
    try {
      await fetch(`/api/todos/${id}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json'},
      })
      get()
    } catch (error) {
      alert(`Failed to delete todo: ${error}`)
    }
  }

  const update = async(e: React.SyntheticEvent, id: string, todo: Todo) => {
    try {
      await fetch(`/api/todos/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json'},
        body: JSON.stringify(todo)
      })
      get()
    } catch (error) {
      alert(`Failed to update todo: ${error}`)
    }
  }

  const get = async() => {
    try {
      const res = await fetch(`/api/todos`)
      setTodos(await res.json() as Todo[])
    } catch (error) {
      console.error(`Failed to get todos: ${error}`)
    }
  }


  /*
  / This block communicates with the acorn website for the setup demo.
  / If you're using this starter on your own, you can ignore or remove it.
  */
  let ready = useRef(false)
  let loaded = useRef(false)
  useEffect(() => {
    setWelcome(message)

    if ( loaded.current ) {
      if ( window.top && ready.current ) {
        console.info('Updated')
        window.top.postMessage('updated','*')
      } else {
        console.info('Updated, but not Ready')
      }
    } else {
      loaded.current = true

      console.info('Loaded')
      get().then(() => {
        if ( window.top ) {
          window.top.postMessage('loaded','*')
        }

        setTimeout(() => {
          console.info('Ready')
          ready.current = true
        }, 3000)
      })
    }
  }, [])

  return (
    <div className={styles.container}>
      <div className={styles.head}>
        <title>Starter App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </div>

      <div className={styles.main}>
        <div className={styles.header}>
          <div className={styles.title}>{welcome}</div>
          <hr/>
        </div>

        {todos.map((todo, i) => 
          <div key={i} className={styles.todo}>
            <div className={styles.viewComplete}>
              <input type="checkbox" checked={todo.complete} onChange={(e) => {
                todo.complete = !todo.complete
                update(e, todo.id, todo)
              }}/>
            </div>
            <div className={styles.viewName}>
              <span className={todo.complete ? styles.strike : ""}>
                {todo.name}
              </span>
            </div>
            <div className={styles.viewRemove}>
              <button className={styles.remove} onClick={(e) => remove(e, todo.id) }>üóëÔ∏è</button>
            </div>
            <div className={styles.viewContent}>
              <span className={todo.complete ? styles.strike : ""}>
                <ReactMarkdown linkTarget="_blank">
                  {todo.content!}
                </ReactMarkdown>
              </span>
            </div>
          </div>
        )}

        <form className={styles.form} onSubmit={create}>
          <input value={name} className={styles.inputName} onChange={(e) => setName(e.target.value)} placeholder="Enter a title"/>
          <textarea value={content} className={styles.inputContent} placeholder="Add some detail (supports markdown)" onChange={(e) => setContent(e.target.value)}/>
          <br/>
          <input className={styles.submit} disabled={!name && !content} type="submit" value="Add new todo" />
        </form>

      </div>
    </div>
  )
}
